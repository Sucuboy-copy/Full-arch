name: Compilación Termux (Paquete PIP AArch64)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  mobile_build:
    runs-on: ubuntu-latest
    
    # Definimos la matriz para compilar solo AArch64
    strategy:
      matrix:
        include:
          # 1. Objetivo Termux (Android) - AArch64 (64-bit ARM)
          # Usamos la imagen Debian multi-arquitectura estándar, forzando AArch64 con --platform.
          - target-arch: aarch64
            target-system: termux
            docker-image: debian:bullseye # Imagen Debian multi-arquitectura estándar
            artifact-name: spotdl-pip-aarch64-packages
            
    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4

    - name: 2. Configurar QEMU para Emulación AArch64
      # Esto permite que el runner de Ubuntu (x86_64) ejecute contenedores AArch64
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: 3. Generación del Paquete PIP (AArch64) - Usando Docker
      # Ejecuta la lógica dentro del contenedor AArch64 emulado para crear el sdist/wheel
      run: |
        TARGET_ARCH="${{ matrix.target-arch }}"
        TARGET_SYS="${{ matrix.target-system }}"
        DOCKER_IMAGE="${{ matrix.docker-image }}"
        ARTIFACT_NAME="${{ matrix.artifact-name }}"
        
        echo "Iniciando generación de paquetes PIP para ARQUITECTURA: \$TARGET_ARCH"
        
        # 3.1. Crear el Script de Build Temporal
        cat > build_script.sh <<-EOF
        #!/bin/bash
        set -e
        
        echo "Preparando entorno AArch64 para construir paquete instalable por pip..."
        
        # 1. Configurar y actualizar APT (dentro del contenedor Debian AArch64)
        export DEBIAN_FRONTEND=noninteractive
        apt update -y 
        
        # 2. Instalar herramientas de compilación de Python (build, setuptools, wheel)
        echo "Instalando Python y herramientas de packaging..."
        apt install -y python3 python3-pip python3-dev build-essential tar gzip
        # Instalamos las herramientas que generan sdist y wheel
        pip3 install build setuptools wheel
        
        # 3. Generar el paquete (sdist y wheel)
        # Esto genera los archivos .tar.gz (sdist) y .whl (wheel) en el directorio dist/
        echo "Generando sdist y wheel AArch64..."
        python3 -m build --wheel --sdist
        
        # 4. Empaquetar el directorio dist/
        # El directorio dist/ contiene todos los archivos .whl y .tar.gz generados
        echo "Empaquetando el directorio dist/..."
        # El directorio dist/ se encuentra en /src/dist
        tar -czf "\$ARTIFACT_NAME.tar.gz" dist
        
        EOF
        
        # 3.2. Ejecutar el script dentro del contenedor AArch64
        docker run --rm \
          --platform linux/arm64 \
          -v "$(pwd)":/src \
          -w /src \
          ${{ matrix.docker-image }} \
          /bin/bash /src/build_script.sh
          
    - name: 4. Subir Artefacto
      uses: actions/upload-artifact@v4
      with:
        # El artefacto ahora contiene el directorio dist/ completo
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.tar.gz
